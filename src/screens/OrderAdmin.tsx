import React, {useEffect, useState} from 'react';
import {
  View,
  Text,
  FlatList,
  Image,
  TouchableOpacity,
  ActivityIndicator,
  Alert,
  StyleSheet,
} from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import {getAllOrderById, updateStatusOrder} from '../apis/OrderAdmin';
import { createNotiOrder } from '../apis/Noti';

// const API_BASE = 'http://localhost:3001/api/order'; // ƒê·ªïi th√†nh ƒë·ªãa ch·ªâ backend th·∫≠t n·∫øu c·∫ßn

// Map status t·ª´ DB sang ti·∫øng Vi·ªát
const statusMap: Record<string, string> = {
  pending: 'Ch·ªù x√°c nh·∫≠n',
  confirmed: 'ƒê√£ x√°c nh·∫≠n',
  shipping: 'ƒêang v·∫≠n chuy·ªÉn',
  delivered: 'ƒê√£ giao h√†ng',
  completed: 'ƒê√£ ho√†n th√†nh',
  cancelled: 'ƒê√£ h·ªßy ƒë∆°n',
};

// Flow chuy·ªÉn tr·∫°ng th√°i
const statusFlow: Record<string, string> = {
  pending: 'confirmed',
  confirmed: 'shipping',
  shipping: 'delivered',
  delivered: 'completed',
};

const OrderAdmin = () => {
  const [orders, setOrders] = useState([]);
  const [loading, setLoading] = useState(true);

  const fetchOrders = async () => {
    try {
      const userData = await AsyncStorage.getItem('user');
      if (userData) {
        const user = JSON.parse(userData);
        try {
          const res = await getAllOrderById(user._id);
          if (res && res.data && +res.data.EC === 0) {
            setOrders(res.data.DT);
          } else {
            Alert.alert('L·ªói', res.data.EM);
          }
        } catch (e) {
          Alert.alert('L·ªói', 'Kh√¥ng th·ªÉ l·∫•y danh s√°ch ƒë∆°n h√†ng.');
        } finally {
          setLoading(false);
        }
      }
    } catch (e) {
      console.error('L·ªói khi l·∫•y d·ªØ li·ªáu:', e);
    }
  };

  const getNextStatusCode = (currentStatus: string) => {
    return statusFlow[currentStatus] || currentStatus;
  };
  const updateOrderStatus = async (orderId: string, currentStatus: string) => {
    const nextStatus = getNextStatusCode(currentStatus);
  
    if (nextStatus === currentStatus) {
      Alert.alert('Th√¥ng b√°o', 'ƒê∆°n h√†ng ƒë√£ ho√†n t·∫•t kh√¥ng th·ªÉ c·∫≠p nh·∫≠t ti·∫øp.');
      return;
    }
  
    try {
      const res = await updateStatusOrder(orderId, nextStatus);
  
      if (res.data && +res.data.EC === 0) {
        // L·∫•y th√¥ng tin user t·ª´ AsyncStorage
        const userData = await AsyncStorage.getItem('user');
        if (!userData) return;
        const user = JSON.parse(userData);
  
        // L·∫•y l·∫°i th√¥ng tin ƒë∆°n h√†ng ƒë·ªÉ l·∫•y ·∫£nh s·∫£n ph·∫©m
        const orderRes = await getAllOrderById(user._id);
        const orders = orderRes?.data?.DT || [];
        const currentOrder = orders.find((o: any) => o._id === orderId);
        
        // L·∫•y ·∫£nh s·∫£n ph·∫©m ƒë·∫ßu ti√™n trong ƒë∆°n h√†ng
        const image = currentOrder?.products?.[0]?.image || '';
  
        // T√≠nh ng√†y h√¥m sau (d√πng cho ph·∫ßn completed)
        const today = new Date();
        const tomorrow = new Date(today);
        tomorrow.setDate(today.getDate() + 1);
        const formattedTomorrow = tomorrow.toLocaleDateString('vi-VN');
  
        // T·∫°o th√¥ng b√°o t∆∞∆°ng ·ª©ng
        let notifications: any = [];
  
        switch (nextStatus) {
          case 'confirmed':
            notifications.push({
              name: "X√°c nh·∫≠n ƒë∆°n h√†ng",
              description: `ƒê∆°n h√†ng ${orderId} ƒë√£ ƒë∆∞·ª£c ng∆∞·ªùi b√°n x√°c nh·∫≠n. B·∫°n s·∫Ω s·ªõm nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o khi ƒë∆°n h√†ng b·∫Øt ƒë·∫ßu v·∫≠n chuy·ªÉn.`,
              image: image, // Th√™m image
            });
            break;
  
          case 'shipping':
            notifications.push({
              name: "ƒêang v·∫≠n chuy·ªÉn",
              description: `ƒê∆°n h√†ng ${orderId} ƒë√£ r·ªùi kh·ªèi kho v√† ƒëang ƒë∆∞·ª£c v·∫≠n chuy·ªÉn ƒë·∫øn b·∫°n. Vui l√≤ng gi·ªØ ƒëi·ªán tho·∫°i ƒë·ªÉ nh·∫≠n h√†ng nh√©!`,
              image: image, // Th√™m image
            });
            break;
  
          case 'delivered':
            notifications.push({
              name: "B·∫°n c√≥ ƒë∆°n h√†ng ƒëang tr√™n ƒë∆∞·ªùng giao ƒë·∫øn",
              description: `ƒê∆°n h√†ng ${orderId} ƒëang tr√™n ƒë∆∞·ªùng giao ƒë·∫øn. Mong b·∫°n vui l√≤ng ch√∫ √Ω ƒëi·ªán tho·∫°i nh√©! üòä`,
              image: image, // Th√™m image
            });
            break;
  
          case 'completed':
            notifications = [
              {
                name: "X√°c nh·∫≠n ƒë√£ nh·∫≠n h√†ng",
                description: `Vui l√≤ng x√°c nh·∫≠n b·∫°n ƒë√£ nh·∫≠n ƒë∆∞·ª£c ƒë∆°n h√†ng ${orderId} ƒë·ªÉ ch√∫ng t√¥i ƒë·∫£m b·∫£o ƒë∆°n h√†ng ƒë√£ ho√†n t·∫•t v√† an to√†n.`,
                image: image, // Th√™m image
              },
              {
                name: "Giao ki·ªán h√†ng th√†nh c√¥ng",
                description: `Ki·ªán h√†ng t·ª´ ƒë∆°n v·∫≠n chuy·ªÉn VC001 c·ªßa ƒë∆°n h√†ng ${orderId} ƒë√£ giao th√†nh c√¥ng ƒë·∫øn b·∫°n.`,
                image: image, // Th√™m image
              },
              {
                name: "Nh·∫Øc nh·ªü: B·∫°n ƒë√£ nh·∫≠n ƒë∆∞·ª£c h√†ng ch∆∞a?",
                description: `N·∫øu b·∫°n ch∆∞a nh·∫≠n ƒë∆∞·ª£c h√†ng ho·∫∑c g·∫∑p v·∫•n ƒë·ªÅ v·ªõi ƒë∆°n h√†ng ${orderId}, h√£y li√™n h·ªá h·ªó tr·ª£ tr∆∞·ªõc ng√†y ${formattedTomorrow}.`,
                image: image, // Th√™m image
              },
              {
                name: "ƒê∆°n h√†ng ƒë√£ ho√†n t·∫•t",
                description: `ƒê∆°n h√†ng ${orderId} ƒë√£ ho√†n th√†nh. B·∫°n h√£y ƒë√°nh gi√° s·∫£n ph·∫©m tr∆∞·ªõc ng√†y ${formattedTomorrow} ƒë·ªÉ gi√∫p ng∆∞·ªùi d√πng kh√°c hi·ªÉu r√µ h∆°n v·ªÅ s·∫£n ph·∫©m nh√©!`,
                image: image, // Th√™m image
              },
            ];
            break;
        }
  
        // L·∫•y token FCM
        const fcmToken = await AsyncStorage.getItem('fcmToken');
        // G·ª≠i t·ª´ng th√¥ng b√°o l√™n server
        for (const noti of notifications) {
          console.log(user._id, user._id, orderId, noti.name, noti.image, noti.description, fcmToken);
          await createNotiOrder(user._id, user._id, orderId, noti.name, noti.image, noti.description, fcmToken || '');
        }
  
        Alert.alert('Th√†nh c√¥ng', 'C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng v√† g·ª≠i th√¥ng b√°o th√†nh c√¥ng.');
        fetchOrders(); // Refresh l·∫°i danh s√°ch ƒë∆°n
      } else {
        Alert.alert('L·ªói', res.data.EM || 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i.');
      }
    } catch (error: any) {
      Alert.alert('L·ªói>>>', error.message || 'C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t.');
    }
  };
  

  useEffect(() => {
    fetchOrders();
  }, []);

  const renderItem = ({item}: {item: any}) => (
    <View style={styles.orderItem}>
      <Text style={styles.orderId}>Order ID: {item._id}</Text>
      <Text style={styles.orderId}>Sender ID: {item.customer_id}</Text>
      <Text style={styles.orderId}>Received ID: {item.customer_id}</Text>
      <Text>Created: {new Date(item.created_at).toLocaleString()}</Text>
      <Text>Status: {statusMap[item.status] || 'Kh√¥ng x√°c ƒë·ªãnh'}</Text>
      <Text style={{fontWeight: 'bold', marginTop: 6}}>Products:</Text>
      {item.products?.map((p: any, i: number) => (
        <View key={i} style={styles.productItem}>
          <Image source={{uri: p.image}} style={styles.productImage} />
          <Text>
            {p.name} x{p.quantity}
          </Text>
        </View>
      ))}
      <TouchableOpacity
        style={styles.statusButton}
        onPress={() => updateOrderStatus(item._id, item.status)}>
        <Text style={styles.statusButtonText}>
          Tr·∫°ng th√°i: {statusMap[item.status] || 'Kh√¥ng x√°c ƒë·ªãnh'}
        </Text>
      </TouchableOpacity>
    </View>
  );

  if (loading) {
    return (
      <ActivityIndicator size="large" color="#007AFF" style={{marginTop: 50}} />
    );
  }

  return (
    <FlatList
      data={orders}
      keyExtractor={item => item._id}
      renderItem={renderItem}
      contentContainerStyle={{padding: 16}}
    />
  );
};

export default OrderAdmin;

const styles = StyleSheet.create({
  orderItem: {
    borderWidth: 1,
    borderColor: '#ccc',
    padding: 12,
    borderRadius: 10,
    marginBottom: 16,
    backgroundColor: '#fff',
  },
  orderId: {
    fontWeight: 'bold',
    marginBottom: 4,
  },
  productItem: {
    flexDirection: 'row',
    alignItems: 'center',
    marginVertical: 4,
  },
  productImage: {
    width: 100,
    height: 100,
    marginRight: 10,
    borderRadius: 6,
  },
  statusButton: {
    marginTop: 10,
    backgroundColor: '#007AFF',
    paddingVertical: 8,
    borderRadius: 6,
    alignItems: 'center',
  },
  statusButtonText: {
    color: 'white',
    fontWeight: 'bold',
  },
});